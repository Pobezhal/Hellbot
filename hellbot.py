from telegram.ext import Application, MessageHandler, CommandHandler, filters
from telegram import Update
from telegram.ext import ContextTypes
import requests
import os
import random
from enum import Enum
#from dotenv import load_dotenv

# Load tokens
load_dotenv()


# Bot modes
class BotMode(Enum):
    NORMAL = 0
    ANGRY = 1
    POLITE = 2
    IDIOT = 3


current_mode = BotMode.NORMAL

# Initialize bot
app = Application.builder().token(os.getenv("BOT_TOKEN")).build()

# Ultra-aggressive Russian responses
RUSSIAN_RESPONSES = {
    "angry": [
        "–ß—ë, {user}, —Å–æ–≤—Å–µ–º –µ–±–ª–∞–Ω? –ù—É –æ–∫...",
        "–û—Ö—É–µ–ª, {user}? –ò–¥–∏ –Ω–∞—Ö—É–π!",
        "–¢—ã, –±–ª—è–¥—å, —Å–µ—Ä—å—ë–∑–Ω–æ? {user}, —Ç—ã –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç?",
        "–ó–∞–≤–∞–ª–∏ –µ–±–∞–ª–æ, {user}, –Ω–∏–∫—Ç–æ —Ç–µ–±—è –Ω–µ –∑–≤–∞–ª",
        "–¢—ã –≤–æ–æ–±—â–µ —Å –ª—É–Ω—ã —Å–≤–∞–ª–∏–ª—Å—è? {user}, –∏–¥–∏ –≤ –∂–æ–ø—É"
    ],
    "idiot": [
        "–õ–æ–ª, {user}, —Ç—ã —á–µ, –∫–æ–Ω—á–µ–Ω—ã–π?",
        "–ê—Ö–∞—Ö–∞—Ö, {user}, –Ω—É —Ç—ã –¥–µ–±–∏–ª!",
        "–ë–æ–∂–µ, –∫–∞–∫–æ–π –∂–µ —Ç—ã —Ç—É–ø–æ–π, {user}...",
        "{user}, —Ç—ã –≤ —Å–≤–æ—ë–º —É–º–µ –≤–æ–æ–±—â–µ?"
    ]
}

# Mode prompts
mode_prompts = {
    BotMode.NORMAL: "[INST] –û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º: {text} [/INST]",
    BotMode.ANGRY: """[INST] 
–û—Ç–≤–µ—Ç—å –∫–∞–∫ —Ç–æ–∫—Å–∏—á–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Ç—Ä–æ–ª–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ —Å–∞—Ä–∫–∞–∑–º. 
–ü—Ä–∏–º–µ—Ä—ã:
1. "–ß—ë –∑–∞ —Ö—É–π–Ω—é —Ç—ã —Å–º–æ—Ä–æ–∑–∏–ª, –¥–æ–ª–±–æ—ë–±?"
2. "–ò–¥–∏ –Ω–∞—Ö—É–π —Å–æ —Å–≤–æ–∏–º —Ç—É–ø—ã–º –≤–æ–ø—Ä–æ—Å–æ–º"
3. "–¢—ã –≤–æ–æ–±—â–µ –¥–µ–±–∏–ª? –¢–∞–∫–æ–π –±—Ä–µ–¥ –Ω–µ—Å—Ç–∏..."

–í–æ–ø—Ä–æ—Å: {text} 
[/INST]""",
    BotMode.POLITE: "[INST] –û—Ç–≤–µ—Ç—å –≤–µ–∂–ª–∏–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º: {text} [/INST]",
    BotMode.IDIOT: "[INST] –û—Ç–≤–µ—Ç—å –∫–∞–∫ –ø–æ–ª–Ω—ã–π –∏–¥–∏–æ—Ç —Å —Ç—É–ø—ã–º–∏ —à—É—Ç–∫–∞–º–∏: {text} [/INST]"
}


async def reply_with_mistral(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        prompt_template = mode_prompts[current_mode]
        payload = {
            "inputs": prompt_template.format(text=update.message.text),
            "parameters": {
                "max_new_tokens": 100,
                "temperature": 0.9 if current_mode == BotMode.ANGRY else 0.7,
                "repetition_penalty": 1.5 if current_mode == BotMode.ANGRY else 1.2
            }
        }

        response = requests.post(
            "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.3",
            headers={"Authorization": f"Bearer {os.getenv('HF_TOKEN')}"},
            json=payload,
            timeout=30
        )

        if response.status_code == 200:
            reply = response.json()[0]["generated_text"].split("[/INST]")[-1].strip()
        elif response.status_code == 503:
            reply = "–ú–æ–¥–µ–ª—å –≥—Ä—É–∑–∏—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏ 30 —Å–µ–∫—É–Ω–¥, —É—ë–±–æ–∫..."
        else:
            reply = f"–û—à–∏–±–∫–∞ API {response.status_code}"

        await update.message.reply_text(reply[:400])

    except Exception:
        if current_mode in [BotMode.ANGRY, BotMode.IDIOT]:
            response_type = "angry" if current_mode == BotMode.ANGRY else "idiot"
            insult = random.choice(RUSSIAN_RESPONSES[response_type]).format(
                user=update.message.from_user.first_name
            )
            await update.message.reply_text(insult)
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞, —Å—É–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")


# Command handlers
async def poslat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == "private":
        await update.message.reply_text("–ò–¥–∏ –Ω–∞—Ö—É–π –æ–¥–∏–Ω! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥—Ä—É–ø–ø!")
        return

    members = []
    async for member in context.bot.get_chat_members(update.message.chat.id):
        if not member.user.is_bot:
            members.append(f"@{member.user.username}" if member.user.username else member.user.first_name)

    if not members:
        await update.message.reply_text("–¢—É—Ç –¥–∞–∂–µ –ø–æ—Å–ª–∞—Ç—å –Ω–∞—Ö—É–π –Ω–µ–∫–æ–≥–æ...")
        return

    if len(members) > 5:
        reply = "–í–°–ï –û–¢–ü–†–ê–í–õ–ï–ù–´ –ù–ê–•–£–ô! üí•"
    else:
        reply = f"{', '.join(members)} - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—Ö—É–π! üñï"

    await update.message.reply_text(reply)


async def random_poslat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    targets = ["@–¥—É—Ä–∞–∫", "@–ø–∏–¥–æ—Ä", "@–ª–æ—Ö", "–≤—Å–µ –≤—ã"]
    await update.message.reply_text(f"{random.choice(targets)} -  –Ω–∞—Ö—É–π –æ—Ç—Å—é–¥–∞, –∫–∞–Ω–∞–ª—å—è! üñï")


async def poslat_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–°–ï –ù–ê–•–£–ô! –í–´–í–û–ó –ú–£–°–û–†–ê! üóëÔ∏èüî•")


async def change_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_mode
    mode_map = {
        "normal": BotMode.NORMAL,
        "angry": BotMode.ANGRY,
        "polite": BotMode.POLITE,
        "idiot": BotMode.IDIOT
    }
    mode = context.args[0].lower() if context.args else "normal"
    current_mode = mode_map.get(mode, BotMode.NORMAL)
    await update.message.reply_text(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {mode.upper()}")


# Register handlers
app.add_handler(CommandHandler("poslat", poslat_command))
app.add_handler(CommandHandler("random_poslat", random_poslat))
app.add_handler(CommandHandler("poslat_all", poslat_all))
app.add_handler(CommandHandler("mode", change_mode))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply_with_mistral))

if __name__ == "__main__":
    print("ü§ñ –ê–ì–†–ï–°–°–ò–í–ù–´–ô –•–ï–õ–õ–ë–û–¢ –ó–ê–ü–£–©–ï–ù! Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    app.run_polling()
